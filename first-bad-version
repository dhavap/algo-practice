// You are a product manager and currently leading a team to develop a new product. 
// Unfortunately, the latest version of your product fails the quality check. 
// Since each version is developed based on the previous version, all the versions 
// after a bad version are also bad.

// Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, 
// which causes all the following ones to be bad.

// You are given an API bool isBadVersion(version) which returns whether version is bad. 
// Implement a function to find the first bad version. You should minimize the 
// number of calls to the API.

// [Problem from leetcode.com]

/* The isBadVersion API is defined in the parent class VersionControl.
      bool IsBadVersion(int version); */

public class Solution : VersionControl {
    public int FirstBadVersion(int n) { 
        for (int i = n; i > 0; i--)  
        {
            if (!IsBadVersion(i))
            {
                return i+1;
            };
        }
        return 1;
    }
}

// Best case: O(1)
// In the best case, the first version is the bad version and therefore the amount of times
// IsBadVersion is called is constant.

// Worst case: O(n)
// In the worst case, the bad version is the last version. Therefore it will be the maximum
// number of times IsBadVersion can be called, which is n times. It has a linear relationship.

// Expected case: O(n)
// In the expected case, as we check for bad versions, the number of versions we still need to 
// look through decreases linearly. It searches through elements linearly. 
// n, n-1, n-2, etc.

// Better solution: To use a binary search. This would make it faster with an expected time of O(log n).
